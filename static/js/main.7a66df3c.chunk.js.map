{"version":3,"sources":["redux/actionTypes/nodesActionTypes.js","redux/reducers/nodesReducer.js","redux/reducers/index.js","redux/store.js","services.js","components/MainMenu.js","components/EditPanel.js","components/Modal.js","components/MyDiagram.js","redux/actions/nodesActions.js","App.js","serviceWorker.js","index.js"],"names":["initialState","nodeTypes","combineReducers","nodes","state","type","payload","actionTypes","persistConfig","key","storage","whitelist","persistedReducer","persistReducer","rootReducer","store","createStore","composeWithDevTools","applyMiddleware","thunk","persistStore","fetchNodeTypes","a","async","axios","get","res","console","log","useStyles","makeStyles","drawerPaper","width","connect","props","classes","colors","addNode","Drawer","variant","anchor","paper","Object","keys","length","map","index","Button","uuidv4","onClick","padding","EditPanel","node","onClose","onSubmit","useState","newName","setNewName","toggleDrawer","event","open","className","list","role","onKeyDown","FormControl","InputLabel","htmlFor","Input","id","onChange","e","target","value","theme","modal","display","alignItems","justifyContent","backgroundColor","palette","background","border","boxShadow","shadows","spacing","MyDiagram","nodeId","contextNode","selectedNode","selectedNodeKeys","model","nodeDataArray","label","color","linkDataArray","from","to","onEditPanelClose","setState","onNameChange","newModel","modelChangeHandler","eventType","createDiagram","diagramId","$","go","make","myDiagram","initialContentAlignment","Center","nodeTemplate","strokeWidth","position","margin","that","addDiagramListener","part","subject","diagram","selection","count","data","hasParent","connection","alert","removeNode","nodeKey","nodeToRemoveIndex","findIndex","slice","removeLink","linKToRemove","linkToRemoveIndex","link","nodeSelectionHandler","isSelected","nodeIndexToRemove","newNodeId","linksToAdd","parent","concat","ModelChangeEventType","Remove","nodeData","linkData","this","getNodeTypes","onModelChange","React","Component","mapDispatchToProps","dispatch","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7a66df3c.chunk.js","sourcesContent":["export default {\n  GET_NODE_TYPES: \"GET_NODE_TYPES\"\n};\n","import actionTypes from \"../actionTypes/nodesActionTypes\";\n\nconst initialState = {\n  nodeTypes: {}\n};\n\nexport default (state = initialState, { type, payload }) => {\n  switch (type) {\n    case actionTypes.GET_NODE_TYPES:\n      return { ...state, nodeTypes: payload };\n    default:\n      return state;\n  }\n};\n","import { combineReducers } from \"redux\";\n\nimport nodes from \"./nodesReducer\";\n\nexport default combineReducers({\n  nodes\n});\n","import { createStore, applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport { persistStore, persistReducer } from \"redux-persist\";\nimport storage from \"redux-persist/lib/storage\";\nimport rootReducer from \"./reducers\";\n\nconst persistConfig = {\n  key: \"User\",\n  storage,\n  whitelist: [\"User\"]\n};\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\n\nconst store = createStore(\n  persistedReducer,\n  composeWithDevTools(applyMiddleware(thunk))\n);\n\nconst persistor = persistStore(store);\n\nexport default store;\n\nexport { persistor };\n","import axios from \"axios\";\n\nexport const fetchNodeTypes = async () => {\n  const res = await axios.get(\n    \"https://nnio-project.herokuapp.com/admin/layers_schemas\"\n  );\n  console.log(res);\n  return res;\n};\n","import React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Drawer, Button } from \"@material-ui/core\";\nimport uuidv4 from \"uuid/v4\";\nimport _ from \"lodash\";\n\nimport { getNodeTypes } from \"../redux/actions/nodesActions\";\n\nconst useStyles = makeStyles(() => ({\n  drawerPaper: {\n    width: 180\n  }\n}));\n\nconst MainMenu = props => {\n  const classes = useStyles();\n  const colors = [\"#88dee3\", \"#ffcf99\", \"#82ab79\", \"#ab93ad\"];\n  const { addNode, nodeTypes } = props;\n  return (\n    <Drawer\n      variant=\"permanent\"\n      anchor=\"left\"\n      classes={{\n        paper: classes.drawerPaper\n      }}\n    >\n      {nodeTypes &&\n        Object.keys(nodeTypes).length &&\n        Object.keys(nodeTypes).map((type, index) => (\n          <Button key={uuidv4()} onClick={() => addNode(type, colors[index])}>\n            {type}\n          </Button>\n        ))}\n    </Drawer>\n  );\n};\n\nconst mapStateToProps = state => {\n  return {\n    nodeTypes: state.nodes.nodeTypes\n  };\n};\n\nexport default connect(mapStateToProps)(MainMenu);\n","import React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport {\n  Drawer,\n  Button,\n  FormControl,\n  InputLabel,\n  Input\n} from \"@material-ui/core\";\n\nconst useStyles = makeStyles(() => ({\n  drawerPaper: {\n    width: 180,\n    padding: 10\n  }\n}));\n\nexport const EditPanel = props => {\n  const classes = useStyles();\n  const { node, onClose, onSubmit } = props;\n  //   const [isOpen, setState] = useState(true);\n  const [newName, setNewName] = useState(\"\");\n\n  const toggleDrawer = () => event => {\n    if (event.type === \"keydown\" && event.key === \"Escape\") {\n      onClose();\n    }\n  };\n\n  const sideList = () => (\n    <div\n      className={classes.list}\n      role=\"presentation\"\n      onClick={toggleDrawer(false)}\n      onKeyDown={toggleDrawer(false)}\n    >\n      <FormControl>\n        <InputLabel htmlFor=\"my-input\">New node name</InputLabel>\n        <Input\n          id=\"my-input\"\n          onChange={e => setNewName(e.target.value)}\n          value={newName}\n        />\n        <Button onClick={() => onSubmit(newName)}>Change name</Button>\n      </FormControl>\n    </div>\n  );\n\n  return (\n    <div>\n      <Drawer anchor=\"right\" open={!!node} onClose={toggleDrawer(false)}>\n        {sideList()}\n      </Drawer>\n    </div>\n  );\n};\n","import React, { useState } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport {\n  Modal,\n  Backdrop,\n  Fade,\n  FormControl,\n  Input,\n  InputLabel,\n  Button\n} from \"@material-ui/core\";\n\nconst useStyles = makeStyles(theme => ({\n  modal: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\"\n  },\n  paper: {\n    backgroundColor: theme.palette.background.paper,\n    border: \"2px solid #000\",\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing(2, 4, 3)\n  }\n}));\n\nexport default function TransitionsModal(props) {\n  const classes = useStyles();\n  const [newName, setNewName] = useState(\"\");\n\n  return (\n    <div>\n      <Modal\n        aria-labelledby=\"transition-modal-title\"\n        aria-describedby=\"transition-modal-description\"\n        className={classes.modal}\n        open={props.open}\n        onClose={props.handleClose}\n        closeAfterTransition\n        BackdropComponent={Backdrop}\n        BackdropProps={{\n          timeout: 500\n        }}\n      >\n        <Fade in={props.open}>\n          <FormControl>\n            <InputLabel htmlFor=\"my-input\">New node name</InputLabel>\n            <Input\n              id=\"my-input\"\n              onChange={e => setNewName(e.target.value)}\n              value={newName}\n            />\n          </FormControl>\n        </Fade>\n      </Modal>\n    </div>\n  );\n}\n","import React from \"react\";\nimport * as go from \"gojs\";\nimport { connect } from \"react-redux\";\nimport { ToolManager, Diagram } from \"gojs\";\nimport { GojsDiagram, ModelChangeEventType } from \"react-gojs\";\n\nimport MainMenu from \"./MainMenu\";\nimport { EditPanel } from \"./EditPanel\";\nimport { getNodeTypes } from \"../redux/actions/nodesActions\";\nimport \"./MyDiagram.css\";\nimport Modal from \"./Modal\";\n\nclass MyDiagram extends React.Component {\n  nodeId = 0;\n  state = {\n    open: false,\n    contextNode: \"\",\n    selectedNode: \"\",\n    selectedNodeKeys: [],\n    model: {\n      nodeDataArray: [\n        { key: \"Alpha\", label: \"Alpha\", color: \"lightblue\" },\n        { key: \"Beta\", label: \"Beta\", color: \"orange\" },\n        { key: \"Gamma\", label: \"Gamma\", color: \"lightgreen\" },\n        { key: \"Delta\", label: \"Delta\", color: \"pink\" },\n        { key: \"Omega\", label: \"Omega\", color: \"grey\" }\n      ],\n      linkDataArray: [\n        { from: \"Alpha\", to: \"Beta\" },\n        { from: \"Alpha\", to: \"Gamma\" },\n        { from: \"Beta\", to: \"Delta\" },\n        { from: \"Gamma\", to: \"Omega\" }\n      ]\n    }\n  };\n\n  componentWillMount() {\n    this.props.getNodeTypes();\n  }\n\n  handleModal(state) {\n    this.setState({\n      open: state.contextNode.label\n    });\n  }\n\n  render() {\n    return (\n      <section>\n        <MainMenu addNode={this.addNode} />\n        <GojsDiagram\n          key=\"gojsDiagram\"\n          diagramId=\"myDiagramDiv\"\n          model={this.state.model}\n          className=\"myDiagram\"\n          createDiagram={this.createDiagram}\n          onModelChange={this.modelChangeHandler}\n        />\n        <EditPanel\n          node={this.state.contextNode}\n          onClose={this.onEditPanelClose}\n          onSubmit={this.onNameChange}\n        />\n      </section>\n    );\n  }\n\n  onEditPanelClose = () => {\n    this.setState({ ...this.state, contextNode: \"\" });\n  };\n\n  onNameChange = newName => {\n    const newModel = this.state.model.nodeDataArray.map(node => {\n      if (node.key === this.state.contextNode.key) {\n        node.label = newName;\n        console.log(node);\n      }\n      return node;\n    });\n    console.log(newModel);\n    this.setState({\n      ...this.state,\n      model: {\n        ...this.state.model,\n        nodeDataArray: newModel\n      }\n    });\n    this.modelChangeHandler({ eventType: \"\" });\n    this.onEditPanelClose();\n  };\n\n  createDiagram = diagramId => {\n    const $ = go.GraphObject.make;\n    const myDiagram = $(go.Diagram, diagramId, {\n      initialContentAlignment: go.Spot.Center,\n      \"undoManager.isEnabled\": true\n    });\n    myDiagram.nodeTemplate = $(\n      go.Node,\n      \"Vertical\",\n      new go.Binding(\"location\", \"loc\"),\n      $(\n        go.Shape,\n        \"Circle\",\n        { strokeWidth: 0 },\n        new go.Binding(\"fill\", \"color\")\n      ),\n      $(go.TextBlock, { position: \"relative\" }, new go.Binding(\"text\", \"key\")),\n      $(go.TextBlock, { margin: 8 }, new go.Binding(\"text\", \"label\"))\n    );\n    const that = this;\n    myDiagram.addDiagramListener(\"ObjectSingleClicked\", function(e) {\n      let part = e.subject.part;\n      if (!(part instanceof go.Link)) {\n        if (e.diagram.selection.count === 1) {\n          that.setState({ selectedNode: part.data.key });\n        } else if (e.diagram.selection.count === 2 && that.state.selectedNode) {\n          let hasParent;\n          console.log(that.state.model.linkDataArray);\n          that.state.model.linkDataArray.map(connection => {\n            console.log(connection.to);\n            console.log(part.data.key);\n            if (connection.to === part.data.key) {\n              hasParent = true;\n              return;\n            }\n          });\n          if (hasParent) {\n            that.setState({\n              ...that.state,\n              model: {\n                ...that.state.model,\n                linkDataArray: [\n                  ...that.state.model.linkDataArray,\n                  { from: that.state.selectedNode, to: part.data.key }\n                ]\n              }\n            });\n          } else {\n            alert(\"Can not connect\");\n          }\n        }\n      }\n    });\n    myDiagram.addDiagramListener(\"ObjectContextClicked\", function(e) {\n      let part = e.subject.part;\n      if (!(part instanceof go.Link)) {\n        that.setState(\n          {\n            ...that.state,\n            contextNode: part.data\n          },\n          () => {\n            console.log(that.state.contextNode);\n          }\n        );\n      }\n    });\n    return myDiagram;\n  };\n\n  removeNode = nodeKey => {\n    const nodeToRemoveIndex = this.state.model.nodeDataArray.findIndex(\n      node => node.key === nodeKey\n    );\n    if (nodeToRemoveIndex === -1) {\n      return;\n    }\n    this.setState({\n      ...this.state,\n      model: {\n        ...this.state.model,\n        nodeDataArray: [\n          ...this.state.model.nodeDataArray.slice(0, nodeToRemoveIndex),\n          ...this.state.model.nodeDataArray.slice(nodeToRemoveIndex + 1)\n        ]\n      }\n    });\n  };\n\n  removeLink = linKToRemove => {\n    const linkToRemoveIndex = this.state.model.linkDataArray.findIndex(\n      link => link.from === linKToRemove.from && link.to === linKToRemove.to\n    );\n    if (linkToRemoveIndex === -1) {\n      return;\n    }\n    return {\n      ...this.state,\n      model: {\n        ...this.state.model,\n        linkDataArray: [\n          ...this.state.model.linkDataArray.slice(0, linkToRemoveIndex),\n          ...this.state.model.linkDataArray.slice(linkToRemoveIndex + 1)\n        ]\n      }\n    };\n  };\n\n  nodeSelectionHandler = (nodeKey, isSelected) => {\n    if (isSelected) {\n      this.setState({\n        ...this.state,\n        selectedNodeKeys: [...this.state.selectedNodeKeys, nodeKey]\n      });\n    } else {\n      const nodeIndexToRemove = this.state.selectedNodeKeys.findIndex(\n        key => key === nodeKey\n      );\n      if (nodeIndexToRemove === -1) {\n        return;\n      }\n      this.setState({\n        ...this.state,\n        selectedNodeKeys: [\n          ...this.state.selectedNodeKeys.slice(0, nodeIndexToRemove),\n          ...this.state.selectedNodeKeys.slice(nodeIndexToRemove + 1)\n        ]\n      });\n    }\n  };\n\n  addNode = (label, color) => {\n    const newNodeId = \"node\" + this.nodeId;\n    const linksToAdd = this.state.selectedNodeKeys.map(parent => {\n      return { from: parent, to: newNodeId };\n    });\n    this.setState({\n      ...this.state,\n      model: {\n        ...this.state.model,\n        nodeDataArray: [\n          ...this.state.model.nodeDataArray,\n          {\n            key: newNodeId,\n            label: label || \"New Node\",\n            color: color || \"Blue\"\n          }\n        ],\n        linkDataArray:\n          linksToAdd.length > 0\n            ? [...this.state.model.linkDataArray].concat(linksToAdd)\n            : [...this.state.model.linkDataArray]\n      }\n    });\n    this.nodeId += 1;\n  };\n\n  modelChangeHandler = event => {\n    switch (event.eventType) {\n      case ModelChangeEventType.Remove:\n        if (event.nodeData) {\n          this.removeNode(event.nodeData.key);\n        }\n        if (event.linkData) {\n          this.removeLink(event.linkData);\n        }\n        break;\n      default:\n        break;\n    }\n  };\n}\n\nconst mapDispatchToProps = {\n  getNodeTypes\n};\n\nexport default connect(null, mapDispatchToProps)(MyDiagram);\n","import actionTypes from \"../actionTypes/nodesActionTypes\";\nimport { fetchNodeTypes } from \"../../services\";\n\nexport const getNodeTypes = () => async dispatch => {\n  let payload;\n  try {\n    const { data } = await fetchNodeTypes();\n    payload = data;\n  } catch (error) {\n    console.log(error);\n  }\n  dispatch({\n    type: actionTypes.GET_NODE_TYPES,\n    payload\n  });\n};\n","import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/store\";\nimport MyDiagram from \"./components/MyDiagram\";\nimport \"normalize.css\";\n\nexport default class App extends Component {\n  render() {\n    return (\n      <Provider store={store}>\n        <div>\n          <MyDiagram />\n        </div>\n      </Provider>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"app\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}