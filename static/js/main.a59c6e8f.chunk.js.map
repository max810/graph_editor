{"version":3,"sources":["redux/actionTypes/nodesActionTypes.js","redux/reducers/nodesReducer.js","redux/reducers/index.js","redux/store.js","services.js","components/MainMenu.js","components/EditPanel.js","redux/actionTypes/diagramActionTypes.js","helpers/createJson.js","components/Modal.js","components/MyDiagram.js","redux/actions/nodesActions.js","redux/actions/diagramActions.js","App.js","serviceWorker.js","index.js"],"names":["initialState","nodeTypes","combineReducers","nodes","state","type","payload","actionTypes","persistConfig","key","storage","whitelist","persistedReducer","persistReducer","rootReducer","store","createStore","composeWithDevTools","applyMiddleware","thunk","persistStore","fetchNodeTypes","a","async","axios","get","res","console","log","exportDiagram","body","post","useStyles","makeStyles","drawerPaper","width","connect","props","classes","colors","addNode","Drawer","variant","anchor","paper","Object","keys","length","map","index","Button","uuidv4","onClick","content","padding","EditPanel","node","onClose","onSubmit","useState","newName","setNewName","toggleDrawer","event","open","className","list","role","onKeyDown","FormControl","InputLabel","htmlFor","Input","id","onChange","e","target","value","nodeDataArray","links","linkDataArray","layers","inputs","forEach","link","entries","name","label","params","date_created","Date","toISOString","theme","modal","display","alignItems","justifyContent","backgroundColor","palette","background","border","boxShadow","shadows","spacing","MyDiagram","nodeId","contextNode","selectedNode","selectedNodeKeys","model","color","from","to","onEditPanelClose","setState","onNameChange","newModel","modelChangeHandler","eventType","createDiagram","diagramId","$","go","make","myDiagram","initialContentAlignment","Center","nodeTemplate","strokeWidth","position","margin","font","that","addDiagramListener","part","subject","diagram","selection","count","data","hasParent","connection","alert","removeNode","nodeKey","nodeToRemoveIndex","findIndex","slice","removeLink","linKToRemove","linkToRemoveIndex","nodeSelectionHandler","isSelected","nodeIndexToRemove","newNodeId","linksToAdd","parent","concat","ModelChangeEventType","Remove","nodeData","linkData","this","getNodeTypes","exportArch","onModelChange","linkKeyProperty","style","float","React","Component","mapDispatchToProps","dispatch","Json","createJson","JSON","stringify","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a59c6e8f.chunk.js","sourcesContent":["export default {\n  GET_NODE_TYPES: \"GET_NODE_TYPES\"\n};\n","import actionTypes from \"../actionTypes/nodesActionTypes\";\n\nconst initialState = {\n  nodeTypes: {}\n};\n\nexport default (state = initialState, { type, payload }) => {\n  switch (type) {\n    case actionTypes.GET_NODE_TYPES:\n      return { ...state, nodeTypes: payload };\n    default:\n      return state;\n  }\n};\n","import { combineReducers } from \"redux\";\n\nimport nodes from \"./nodesReducer\";\n\nexport default combineReducers({\n  nodes\n});\n","import { createStore, applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport { persistStore, persistReducer } from \"redux-persist\";\nimport storage from \"redux-persist/lib/storage\";\nimport rootReducer from \"./reducers\";\n\nconst persistConfig = {\n  key: \"User\",\n  storage,\n  whitelist: [\"User\"]\n};\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\n\nconst store = createStore(\n  persistedReducer,\n  composeWithDevTools(applyMiddleware(thunk))\n);\n\nconst persistor = persistStore(store);\n\nexport default store;\n\nexport { persistor };\n","import axios from \"axios\";\n\nexport const fetchNodeTypes = async () => {\n  const res = await axios.get(\n    \"https://nnio-project.herokuapp.com/admin/layers_schemas\"\n  );\n  console.log(res);\n  return res;\n};\n\nexport const exportDiagram = async body => {\n  const res = await axios.post(\n    \"https://nnio-project.herokuapp.com/architecture/export-from-json-body\",\n    body\n  );\n  console.log(res);\n  return res;\n};\n","import React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Drawer, Button } from \"@material-ui/core\";\nimport uuidv4 from \"uuid/v4\";\nimport _ from \"lodash\";\n\nimport { getNodeTypes } from \"../redux/actions/nodesActions\";\n\nconst useStyles = makeStyles(() => ({\n  drawerPaper: {\n    width: 180\n  }\n}));\n\nconst MainMenu = props => {\n  const classes = useStyles();\n  const colors = [\"#88dee3\", \"#ffcf99\", \"#82ab79\", \"#ab93ad\"];\n  const { addNode, nodeTypes } = props;\n  return (\n    <Drawer\n      variant=\"permanent\"\n      anchor=\"left\"\n      classes={{\n        paper: classes.drawerPaper\n      }}\n    >\n      {nodeTypes &&\n        Object.keys(nodeTypes).length &&\n        Object.keys(nodeTypes).map((type, index) => (\n          <Button key={uuidv4()} onClick={() => addNode(type, colors[index])}>\n            {type}\n          </Button>\n        ))}\n    </Drawer>\n  );\n};\n\nconst mapStateToProps = state => {\n  return {\n    nodeTypes: state.nodes.nodeTypes\n  };\n};\n\nexport default connect(mapStateToProps)(MainMenu);\n","import React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport {\n  Drawer,\n  Button,\n  FormControl,\n  InputLabel,\n  Input\n} from \"@material-ui/core\";\n\nconst useStyles = makeStyles(() => ({\n  drawerPaper: {\n    width: 200\n  },\n  content: {\n    padding: 10\n  }\n}));\n\nexport const EditPanel = props => {\n  const classes = useStyles();\n  const { node, onClose, onSubmit } = props;\n  const [newName, setNewName] = useState(\"\");\n\n  const toggleDrawer = () => event => {\n    if (event.type === \"keydown\" && event.key === \"Escape\") {\n      onClose();\n    }\n  };\n\n  const sideList = () => (\n    <div\n      className={classes.list}\n      role=\"presentation\"\n      onClick={toggleDrawer(false)}\n      onKeyDown={toggleDrawer(false)}\n    >\n      <FormControl className=\"content\">\n        <InputLabel htmlFor=\"my-input\">New node name</InputLabel>\n        <Input\n          id=\"my-input\"\n          onChange={e => setNewName(e.target.value)}\n          value={newName}\n        />\n        <Button onClick={() => onSubmit(newName)}>Change name</Button>\n      </FormControl>\n      <div className=\"content\">{node.key}</div>\n    </div>\n  );\n\n  return (\n    <div>\n      <Drawer anchor=\"right\" open={!!node} onClose={toggleDrawer(false)}>\n        {sideList()}\n      </Drawer>\n    </div>\n  );\n};\n","export default {\n  EXPORT_DIAGRAM: \"EXPORT_DIAGRAM\"\n};\n","import uuidv4 from \"uuid/v4\";\n\nexport default ({ nodeDataArray: nodes, linkDataArray: links }) => {\n  const layers = nodes.map(node => {\n    const inputs = [];\n    links.forEach((link, index) => {\n      if (Object.entries(link)[1][1] === node.key) {\n        inputs[index] = Object.entries(link)[0][1];\n      }\n    });\n    return {\n      name: `${node.label}`,\n      type: `${node.type}`,\n      inputs: inputs,\n      params: {}\n    };\n  });\n  console.log({\n    date_created: new Date().toISOString(),\n    id: uuidv4(),\n    name: \"myModel_1\",\n    layers: layers\n  });\n  return {\n    date_created: new Date().toISOString(),\n    id: uuidv4(),\n    name: \"myModel_1\",\n    layers: layers\n  };\n};\n","import React, { useState } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport {\n  Modal,\n  Backdrop,\n  Fade,\n  FormControl,\n  Input,\n  InputLabel,\n  Button\n} from \"@material-ui/core\";\n\nconst useStyles = makeStyles(theme => ({\n  modal: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\"\n  },\n  paper: {\n    backgroundColor: theme.palette.background.paper,\n    border: \"2px solid #000\",\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing(2, 4, 3)\n  }\n}));\n\nexport default function TransitionsModal(props) {\n  const classes = useStyles();\n  const [newName, setNewName] = useState(\"\");\n\n  return (\n    <div>\n      <Modal\n        aria-labelledby=\"transition-modal-title\"\n        aria-describedby=\"transition-modal-description\"\n        className={classes.modal}\n        open={props.open}\n        onClose={props.handleClose}\n        closeAfterTransition\n        BackdropComponent={Backdrop}\n        BackdropProps={{\n          timeout: 500\n        }}\n      >\n        <Fade in={props.open}>\n          <FormControl>\n            <InputLabel htmlFor=\"my-input\">New node name</InputLabel>\n            <Input\n              id=\"my-input\"\n              onChange={e => setNewName(e.target.value)}\n              value={newName}\n            />\n          </FormControl>\n        </Fade>\n      </Modal>\n    </div>\n  );\n}\n","import React from \"react\";\nimport * as go from \"gojs\";\nimport { connect } from \"react-redux\";\nimport { ToolManager, Diagram } from \"gojs\";\nimport { GojsDiagram, ModelChangeEventType } from \"react-gojs\";\n\nimport MainMenu from \"./MainMenu\";\nimport { EditPanel } from \"./EditPanel\";\nimport { getNodeTypes } from \"../redux/actions/nodesActions\";\nimport { exportArch } from \"../redux/actions/diagramActions\";\nimport \"./MyDiagram.css\";\nimport Modal from \"./Modal\";\nimport { Button } from \"@material-ui/core\";\nimport createJson from \"../helpers/createJson\";\n\nclass MyDiagram extends React.Component {\n  nodeId = 0;\n  state = {\n    open: false,\n    contextNode: \"\",\n    selectedNode: \"\",\n    selectedNodeKeys: [],\n    model: {\n      nodeDataArray: [\n        { key: \"Alpha\", label: \"name\", color: \"pink\", type: \"Alpha\" },\n        { key: \"Betta\", label: \"name2\", color: \"blue\", type: \"Betta\" }\n      ],\n      linkDataArray: [{ from: \"Alpha\", to: \"Betta\" }]\n    }\n  };\n\n  componentWillMount() {\n    this.props.getNodeTypes();\n  }\n\n  handleModal(state) {\n    this.setState({\n      open: state.contextNode.label\n    });\n  }\n\n  render() {\n    const { model } = this.state;\n    const { exportArch } = this.props;\n    return (\n      <section>\n        <MainMenu addNode={this.addNode} />\n        <GojsDiagram\n          key=\"gojsDiagram\"\n          diagramId=\"myDiagramDiv\"\n          model={this.state.model}\n          className=\"myDiagram\"\n          createDiagram={this.createDiagram}\n          onModelChange={this.modelChangeHandler}\n          linkKeyProperty=\"key\"\n        />\n        <Button\n          style={{ float: \"right\" }}\n          onClick={() => exportArch({ ...model })}\n        >\n          Export JSON\n        </Button>\n        <EditPanel\n          node={this.state.contextNode}\n          onClose={this.onEditPanelClose}\n          onSubmit={this.onNameChange}\n        />\n      </section>\n    );\n  }\n\n  onEditPanelClose = () => {\n    this.setState({ ...this.state, contextNode: \"\" });\n  };\n\n  onNameChange = newName => {\n    const newModel = this.state.model.nodeDataArray.map(node => {\n      if (node.key === this.state.contextNode.key) {\n        node.label = newName;\n        console.log(node);\n      }\n      return node;\n    });\n    console.log(newModel);\n    this.setState({\n      ...this.state,\n      model: {\n        ...this.state.model,\n        nodeDataArray: newModel\n      }\n    });\n    this.modelChangeHandler({ eventType: \"\" });\n    this.onEditPanelClose();\n  };\n\n  createDiagram = diagramId => {\n    const $ = go.GraphObject.make;\n    const myDiagram = $(go.Diagram, diagramId, {\n      initialContentAlignment: go.Spot.Center,\n      \"undoManager.isEnabled\": true\n    });\n    myDiagram.nodeTemplate = $(\n      go.Node,\n      \"Vertical\",\n      new go.Binding(\"location\", \"loc\"),\n      $(\n        go.Shape,\n        \"Circle\",\n        { strokeWidth: 0 },\n        new go.Binding(\"fill\", \"color\")\n      ),\n      $(\n        go.TextBlock,\n        { position: \"relative\" },\n        new go.Binding(\"text\", \"label\")\n      ),\n      $(\n        go.TextBlock,\n        { margin: 8, font: \"Italic small-caps bold 13px Georgia, Serif\" },\n        new go.Binding(\"text\", \"type\")\n      )\n    );\n    const that = this;\n    myDiagram.addDiagramListener(\"ObjectSingleClicked\", function(e) {\n      let part = e.subject.part;\n      if (!(part instanceof go.Link)) {\n        if (e.diagram.selection.count === 1) {\n          that.setState({ selectedNode: part.data.key });\n        } else if (e.diagram.selection.count === 2 && that.state.selectedNode) {\n          let hasParent;\n          console.log(that.state.model.linkDataArray);\n          that.state.model.linkDataArray.map(connection => {\n            console.log(connection.to);\n            console.log(part.data.key);\n            if (connection.to === part.data.key) {\n              hasParent = true;\n              return;\n            }\n          });\n          if (hasParent) {\n            that.setState({\n              ...that.state,\n              model: {\n                ...that.state.model,\n                linkDataArray: [\n                  ...that.state.model.linkDataArray,\n                  { from: that.state.selectedNode, to: part.data.key }\n                ]\n              }\n            });\n          } else {\n            alert(\"Can not connect\");\n          }\n        }\n      }\n    });\n    myDiagram.addDiagramListener(\"ObjectContextClicked\", function(e) {\n      let part = e.subject.part;\n      if (!(part instanceof go.Link)) {\n        that.setState(\n          {\n            ...that.state,\n            contextNode: part.data\n          },\n          () => {\n            console.log(that.state.contextNode);\n          }\n        );\n      }\n    });\n    return myDiagram;\n  };\n\n  removeNode = nodeKey => {\n    const nodeToRemoveIndex = this.state.model.nodeDataArray.findIndex(\n      node => node.key === nodeKey\n    );\n    if (nodeToRemoveIndex === -1) {\n      return;\n    }\n    this.setState({\n      ...this.state,\n      model: {\n        ...this.state.model,\n        nodeDataArray: [\n          ...this.state.model.nodeDataArray.slice(0, nodeToRemoveIndex),\n          ...this.state.model.nodeDataArray.slice(nodeToRemoveIndex + 1)\n        ]\n      }\n    });\n  };\n\n  removeLink = linKToRemove => {\n    const linkToRemoveIndex = this.state.model.linkDataArray.findIndex(\n      link => link.from === linKToRemove.from && link.to === linKToRemove.to\n    );\n    if (linkToRemoveIndex === -1) {\n      return;\n    }\n    return {\n      ...this.state,\n      model: {\n        ...this.state.model,\n        linkDataArray: [\n          ...this.state.model.linkDataArray.slice(0, linkToRemoveIndex),\n          ...this.state.model.linkDataArray.slice(linkToRemoveIndex + 1)\n        ]\n      }\n    };\n  };\n\n  nodeSelectionHandler = (nodeKey, isSelected) => {\n    if (isSelected) {\n      this.setState({\n        ...this.state,\n        selectedNodeKeys: [...this.state.selectedNodeKeys, nodeKey]\n      });\n    } else {\n      const nodeIndexToRemove = this.state.selectedNodeKeys.findIndex(\n        key => key === nodeKey\n      );\n      if (nodeIndexToRemove === -1) {\n        return;\n      }\n      this.setState({\n        ...this.state,\n        selectedNodeKeys: [\n          ...this.state.selectedNodeKeys.slice(0, nodeIndexToRemove),\n          ...this.state.selectedNodeKeys.slice(nodeIndexToRemove + 1)\n        ]\n      });\n    }\n  };\n\n  addNode = (label, color) => {\n    const newNodeId = \"node\" + this.nodeId;\n    const linksToAdd = this.state.selectedNodeKeys.map(parent => {\n      return { from: parent, to: newNodeId };\n    });\n    this.setState({\n      ...this.state,\n      model: {\n        ...this.state.model,\n        nodeDataArray: [\n          ...this.state.model.nodeDataArray,\n          {\n            key: newNodeId,\n            label: label || \"New Node\",\n            color: color || \"Blue\",\n            type: label || \"Node type\"\n          }\n        ],\n        linkDataArray:\n          linksToAdd.length > 0\n            ? [...this.state.model.linkDataArray].concat(linksToAdd)\n            : [...this.state.model.linkDataArray]\n      }\n    });\n    this.nodeId += 1;\n  };\n\n  modelChangeHandler = event => {\n    switch (event.eventType) {\n      case ModelChangeEventType.Remove:\n        if (event.nodeData) {\n          this.removeNode(event.nodeData.key);\n        }\n        if (event.linkData) {\n          this.removeLink(event.linkData);\n        }\n        break;\n      default:\n        break;\n    }\n  };\n}\n\nconst mapDispatchToProps = {\n  getNodeTypes,\n  exportArch\n};\n\nexport default connect(null, mapDispatchToProps)(MyDiagram);\n","import actionTypes from \"../actionTypes/nodesActionTypes\";\nimport { fetchNodeTypes } from \"../../services\";\n\nexport const getNodeTypes = () => async dispatch => {\n  let payload;\n  try {\n    const { data } = await fetchNodeTypes();\n    payload = data;\n  } catch (error) {\n    console.log(error);\n  }\n  dispatch({\n    type: actionTypes.GET_NODE_TYPES,\n    payload\n  });\n};\n","import actionTypes from \"../actionTypes/diagramActionTypes\";\nimport { exportDiagram } from \"../../services\";\nimport createJson from \"../../helpers/createJson\";\n\nexport const exportArch = model => async dispatch => {\n  const Json = createJson(model);\n  console.log(Json);\n  const { data } = await exportDiagram(JSON.stringify(Json));\n  dispatch({\n    type: actionTypes.EXPORT_DIAGRAM,\n    payload: data\n  });\n};\n","import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/store\";\nimport MyDiagram from \"./components/MyDiagram\";\nimport \"normalize.css\";\n\nexport default class App extends Component {\n  render() {\n    return (\n      <Provider store={store}>\n        <div>\n          <MyDiagram />\n        </div>\n      </Provider>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"app\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}